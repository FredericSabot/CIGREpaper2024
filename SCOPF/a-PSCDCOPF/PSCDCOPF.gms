***************************************************************
*** SETS
***************************************************************

set i_sync sync generators;
set i_wind wind generators;
set i_bus buses;
set i_branch branches;
set i_contingency contingencies;
set i_hvdc_embedded embedded hvdc links;
set i_hvdc_interconnection hvdc interconnections;
set i_hvdc_spit hvdc spit;
set i_dispatchable_load dispatchable loads;


***************************************************************
*** PARAMETERS
***************************************************************

parameter Mk;
Mk = 1e6;

parameter Mg;
Mg = 1e6;

*GENERATOR DATA

parameter sync_map(i_sync, i_bus) sync generator map;
parameter wind_map(i_wind, i_bus) wind generator map;
parameter hvdc_embedded_map(i_hvdc_embedded, i_bus) hvdc_embedded map;
parameter hvdc_interconnection_map(i_hvdc_interconnection, i_bus) hvdc_interconnection map;
parameter hvdc_spit_map(i_hvdc_spit, i_bus) hvdc_spit map;
parameter dispatchable_load_map(i_dispatchable_load, i_bus) dispatchable_load map;

parameter lincost(i_sync) slope of each generator cost curve block;
parameter hvdc_interconnection_costs(i_hvdc_interconnection) slope of import costs;
parameter dispatchable_load_costs(i_dispatchable_load) gain of dispatchable loads;

parameter sync_min(i_sync) sync generator minimum generation;
parameter sync_max(i_sync) sync generator maximum generation;
parameter wind_max(i_wind) wind generator available power;
parameter hvdc_embedded_min(i_hvdc_embedded) hvdc_embedded minimum generation;
parameter hvdc_embedded_max(i_hvdc_embedded) hvdc_embedded maximum generation;
parameter hvdc_interconnection_min(i_hvdc_interconnection) hvdc_interconnection minimum generation;
parameter hvdc_interconnection_max(i_hvdc_interconnection) hvdc_interconnection maximum generation;
parameter hvdc_spit_min(i_hvdc_spit) hvdc_spit minimum generation;
parameter hvdc_spit_max(i_hvdc_spit) hvdc_spit maximum generation;
parameter hvdc_spit_total_max available wind for spit hvdcs;
parameter dispatchable_load_min(i_dispatchable_load) dispatchable load minimum demand;
parameter dispatchable_load_max(i_dispatchable_load) dispatchable load maximum demand;

*BRANCH DATA

parameter branch_admittance(i_branch) admittance of branch connecting two nodes;
parameter branch_resistance(i_branch) resistance of branch connecting two nodes;
parameter branch_map(i_branch, i_bus) branch map;

parameter branch_max_N(i_branch) line capacities;
parameter branch_max_E(i_branch) line capacities (emergency);

parameter contingency_states(i_branch, i_contingency) line contingencies;

*DEMAND DATA

parameter demand(i_bus) demand at each bus;


$gdxin PrePSCDCOPF
$load i_sync i_wind i_bus i_branch i_contingency i_hvdc_embedded i_hvdc_interconnection i_hvdc_spit i_dispatchable_load sync_map wind_map hvdc_embedded_map hvdc_interconnection_map hvdc_spit_map dispatchable_load_map lincost hvdc_interconnection_costs dispatchable_load_costs sync_min sync_max wind_max hvdc_embedded_min hvdc_embedded_max hvdc_interconnection_min hvdc_interconnection_max hvdc_spit_min hvdc_spit_max hvdc_spit_total_max dispatchable_load_min dispatchable_load_max branch_admittance branch_resistance branch_map branch_max_N branch_max_E demand contingency_states
$gdxin

***************************************************************
*** VARIABLES
***************************************************************

variable total_cost objective function variable
variable c(i_sync) operation cost for each sync generator
variable c_interconnection(i_hvdc_interconnection) import cost for all HVDC interconnection
variable c_dispatchable_load(i_dispatchable_load) money generated by dispatchable loads

binary variable on(i_sync) whether synchronous generator i in commited or not

positive variable P_sync(i_sync) sync generator outputs
positive variable P_wind(i_wind) wind generator outputs
variable P_hvdc_embedded(i_hvdc_embedded) power setpoint of embedded hvdc links
variable P_hvdc_interconnection(i_hvdc_interconnection) power setpoint of hvdc interconnections
variable P_hvdc_spit(i_hvdc_spit) power setpoint of hvdc spits
variable P_dispatchable_load(i_dispatchable_load) power setpoint of dispatchable loads

variable pf0(i_branch) power flow through lines in initial state
variable pfcontingency(i_branch, i_contingency) power flow through lines in contingency i

variable theta0(i_bus) bus voltage angles
variable thetacontingency(i_bus, i_contingency) bus voltage angles in contingency i

***************************************************************
*** EQUATION DECLARATION
***************************************************************

equations

cost objective function
cost_sum(i_sync) generation cost summation
cost_sum_interconnection(i_hvdc_interconnection) import cost summation
cost_sum_loads(i_dispatchable_load) load cost summation
sync_minP(i_sync) minimum sync generator output
sync_maxP(i_sync) maximum sync generator output
wind_maxP(i_wind) maximum wind generator output
hvdc_embedded_minP(i_hvdc_embedded) minimum hvdc_embedded generator output
hvdc_embedded_maxP(i_hvdc_embedded) maximum hvdc_embedded generator output
hvdc_interconnection_minP(i_hvdc_interconnection) minimum hvdc_interconnection generator output
hvdc_interconnection_maxP(i_hvdc_interconnection) maximum hvdc_interconnection generator output
hvdc_spit_minP(i_hvdc_spit) minimum hvdc_spit generator output
hvdc_spit_maxP(i_hvdc_spit) maximum hvdc_spit generator output
hvdc_spit_total_maxP maximum available wind for spit hvdcs
dispatchable_load_minP(i_dispatchable_load) minimum dispatchable_load generator output
dispatchable_load_maxP(i_dispatchable_load) maximum dispatchable_load generator output
power_balance_0(i_bus) power balance for each bus
power_balance_contingency(i_bus, i_contingency) power balance for each bus for contingency i
line_flow_0(i_branch) defining power flow through lines
line_flow_contingency(i_branch, i_contingency) defining power flow through lines for contingency i
line_capacity_min_0(i_branch) line capacitiy negative limit
line_capacity_max_0(i_branch) line capacitiy positive limit
line_capacity_min_contingency(i_branch, i_contingency) line capacitiy negative limit for contingency i
line_capacity_max_contingency(i_branch, i_contingency) line capacitiy positive limit for contingency i
voltage_angles_min_0(i_bus) voltage angles negative limit
voltage_angles_max_0(i_bus) voltage angles positive limit
voltage_angles_min_ck(i_bus, i_contingency) voltage angles negative limit for contingency i_states
voltage_angles_max_ck(i_bus, i_contingency) voltage angles positive limit for contingency i_states
;


***************************************************************
*** SETTINGS
***************************************************************

*setting the reference bus
theta0.fx ('27') = 0;
thetacontingency.fx('27', i_contingency)= 0;


***************************************************************
*** EQUATIONS
***************************************************************

* Cost includes estimation of losses (priced at 50â‚¬/MWh) to balance the flows between the AC and DC corridors
* AC losses estimated via R*i^2, DC loss estimated as 3% at full load (2GW for each link)
cost..
total_cost =e= sum(i_sync, c(i_sync)) + sum(i_hvdc_interconnection, c_interconnection(i_hvdc_interconnection)) - sum(i_dispatchable_load, c_dispatchable_load(i_dispatchable_load))
                + 1/20*100*0.03*50 * sum(i_hvdc_embedded, P_hvdc_embedded(i_hvdc_embedded) * P_hvdc_embedded(i_hvdc_embedded))
                + 100*50 * sum(i_branch, branch_resistance(i_branch) * pf0(i_branch) * pf0(i_branch));

cost_sum(i_sync)..       c(i_sync) =e= P_sync(i_sync) * lincost(i_sync);

cost_sum_interconnection(i_hvdc_interconnection)..  c_interconnection(i_hvdc_interconnection) =e= P_hvdc_interconnection(i_hvdc_interconnection) * hvdc_interconnection_costs(i_hvdc_interconnection);

cost_sum_loads(i_dispatchable_load)..  c_dispatchable_load(i_dispatchable_load) =e= P_dispatchable_load(i_dispatchable_load) * dispatchable_load_costs(i_dispatchable_load);

sync_minP(i_sync)..   P_sync(i_sync) =g= on(i_sync) * sync_min(i_sync);

sync_maxP(i_sync)..   P_sync(i_sync) =l= on(i_sync) * sync_max(i_sync);

wind_maxP(i_wind)..       P_wind(i_wind) =l= wind_max(i_wind);

hvdc_embedded_minP(i_hvdc_embedded)..   P_hvdc_embedded(i_hvdc_embedded) =g= hvdc_embedded_min(i_hvdc_embedded);

hvdc_embedded_maxP(i_hvdc_embedded)..   P_hvdc_embedded(i_hvdc_embedded) =l= hvdc_embedded_max(i_hvdc_embedded);

hvdc_interconnection_minP(i_hvdc_interconnection)..   P_hvdc_interconnection(i_hvdc_interconnection) =g= hvdc_interconnection_min(i_hvdc_interconnection);

hvdc_interconnection_maxP(i_hvdc_interconnection)..   P_hvdc_interconnection(i_hvdc_interconnection) =l= hvdc_interconnection_max(i_hvdc_interconnection);

hvdc_spit_minP(i_hvdc_spit)..   P_hvdc_spit(i_hvdc_spit) =g= hvdc_spit_min(i_hvdc_spit);

hvdc_spit_maxP(i_hvdc_spit)..   P_hvdc_spit(i_hvdc_spit) =l= hvdc_spit_max(i_hvdc_spit);

hvdc_spit_total_maxP..   sum(i_hvdc_spit, P_hvdc_spit(i_hvdc_spit)) =l= hvdc_spit_total_max;

dispatchable_load_minP(i_dispatchable_load)..   P_dispatchable_load(i_dispatchable_load) =g= dispatchable_load_min(i_dispatchable_load);

dispatchable_load_maxP(i_dispatchable_load)..   P_dispatchable_load(i_dispatchable_load) =l= dispatchable_load_max(i_dispatchable_load);

power_balance_0(i_bus)..
sum(i_sync$(sync_map(i_sync, i_bus)), P_sync(i_sync))
+ sum(i_wind$(wind_map(i_wind, i_bus)), P_wind(i_wind))
+ sum(i_hvdc_embedded, P_hvdc_embedded(i_hvdc_embedded)*hvdc_embedded_map(i_hvdc_embedded, i_bus))
+ sum(i_hvdc_interconnection$(hvdc_interconnection_map(i_hvdc_interconnection, i_bus)), P_hvdc_interconnection(i_hvdc_interconnection))
+ sum(i_hvdc_spit$(hvdc_spit_map(i_hvdc_spit, i_bus)), P_hvdc_spit(i_hvdc_spit))
+ sum(i_branch, pf0(i_branch)*branch_map(i_branch, i_bus))
=e=
demand(i_bus)
+ sum(i_dispatchable_load$(dispatchable_load_map(i_dispatchable_load, i_bus)), P_dispatchable_load(i_dispatchable_load));

power_balance_contingency(i_bus, i_contingency)..
sum(i_sync$(sync_map(i_sync, i_bus)), P_sync(i_sync))
+ sum(i_wind$(wind_map(i_wind, i_bus)), P_wind(i_wind))
+ sum(i_hvdc_embedded, P_hvdc_embedded(i_hvdc_embedded) * hvdc_embedded_map(i_hvdc_embedded, i_bus))
+ sum(i_hvdc_interconnection$(hvdc_interconnection_map(i_hvdc_interconnection, i_bus)), P_hvdc_interconnection(i_hvdc_interconnection))
+ sum(i_hvdc_spit$(hvdc_spit_map(i_hvdc_spit, i_bus)), P_hvdc_spit(i_hvdc_spit))
+ sum(i_branch, pfcontingency(i_branch, i_contingency)*branch_map(i_branch, i_bus))
=e=
demand(i_bus)
+ sum(i_dispatchable_load$(dispatchable_load_map(i_dispatchable_load, i_bus)), P_dispatchable_load(i_dispatchable_load));

line_flow_0(i_branch)..         pf0(i_branch) =e= branch_admittance(i_branch)*sum(i_bus, theta0(i_bus)*branch_map(i_branch, i_bus));

line_flow_contingency(i_branch, i_contingency)..         pfcontingency(i_branch, i_contingency) =e= contingency_states(i_branch, i_contingency)*branch_admittance(i_branch)*sum(i_bus, thetacontingency(i_bus, i_contingency)*branch_map(i_branch, i_bus));

line_capacity_min_0(i_branch)..   pf0(i_branch) =g= -0.95 * branch_max_N(i_branch);

line_capacity_max_0(i_branch)..   pf0(i_branch) =l= 0.95 * branch_max_N(i_branch);

line_capacity_min_contingency(i_branch, i_contingency)..   pfcontingency(i_branch, i_contingency) =g= -0.95 * contingency_states(i_branch, i_contingency)*branch_max_E(i_branch);

line_capacity_max_contingency(i_branch, i_contingency)..   pfcontingency(i_branch, i_contingency) =l= 0.95 * contingency_states(i_branch, i_contingency)*branch_max_E(i_branch);

voltage_angles_min_0(i_bus)..  theta0(i_bus) =g= -pi;

voltage_angles_max_0(i_bus)..  theta0(i_bus) =l= pi;

voltage_angles_min_ck(i_bus, i_contingency)..  thetacontingency(i_bus, i_contingency) =g= -pi;

voltage_angles_max_ck(i_bus, i_contingency)..  thetacontingency(i_bus, i_contingency) =l= pi;

***************************************************************
*** SOLVE
***************************************************************

model test /all/;

option reslim = 1000000;
option Savepoint=1;
option optcr=0.0;

option qcp = cplex;
option mip = cplex;
option miqcp = cplex;

solve test using MIQCP minimizing total_cost;

scalar sol;
sol = test.modelstat;

execute_unload 'PostPSCDCOPF' total_cost, c, c_interconnection, c_dispatchable_load, on, P_sync, P_wind, P_hvdc_embedded, P_hvdc_interconnection, P_hvdc_spit, P_dispatchable_load, pf0, theta0, sol;
